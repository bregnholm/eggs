{"version":3,"sources":["Goals.js","App.js","serviceWorker.js","index.js"],"names":["Goals","milliseconds","this","missingChickens","chickensHatchingPerMinte","daysUntilFinished","Math","floor","hoursUntilFinished","minutesUntilFinished","props","endGoal","currentChickens","chickensPerMinute","habitats","console","log","timeUntilDone","missingChicken","className","toLocaleString","React","Component","App","inputField","e","setState","target","name","round","value","localStorage","setItem","state","nextProps","i","length","currentKey","key","includes","split","pop","getItem","onChange","type","pattern","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mPAyCeA,G,6LApCX,IACMC,EAAgBC,KAAKC,kBAAoBD,KAAKE,2BAA/B,IAKrB,MAAO,CACLC,kBALwBC,KAAKC,MAAMN,EAAY,OAM/CO,mBALyBF,KAAKC,MAAMN,EAHvB,MAGuB,MAMpCQ,qBAL2BH,KAAKC,MAAMN,EAAY,KAAZ,Q,sCAS1BS,GACd,OAAQR,KAAKQ,MAAMC,QAAUT,KAAKQ,MAAME,kB,iDAIxC,OAAQV,KAAKQ,MAAMG,kBAAoBX,KAAKQ,MAAMI,W,+BAIhDC,QAAQC,IAAId,KAAKQ,OADZ,MAE+DR,KAAKe,gBAApEZ,EAFA,EAEAA,kBAAmBG,EAFnB,EAEmBA,mBAAoBC,EAFvC,EAEuCA,qBACxCS,EAAiBhB,KAAKC,kBAC5B,OACM,yBAAKgB,UAAU,SACb,kDACA,4BAAKD,EAAeE,kBACpB,+CACA,4BACE,8BAAOf,GADT,UACyC,8BAAOG,GADhD,cACqF,8BAAOC,GAD5F,iB,GAhCQY,IAAMC,YCqDXC,E,YAnDb,WAAYb,GAAO,IAAD,8BAChB,4CAAMA,KAiBRc,WAAa,SAACC,GACZ,EAAKC,SAAL,eAAgBD,EAAEE,OAAOC,KAAOtB,KAAKuB,MAAMJ,EAAEE,OAAOG,SACpDC,aAAaC,QAAb,eAA6BP,EAAEE,OAAOC,MAAQH,EAAEE,OAAOG,QAlBvD,EAAKG,MAAQ,CACXtB,QAAS,EACTC,gBAAiB,EACjBC,kBAAmB,EACnBC,SAAU,GANI,E,+EAUAoB,GAChB,IAAI,IAAIC,EAAG,EAAGA,EAAIJ,aAAaK,OAAQD,IAAI,CACzC,IAAME,EAAaN,aAAaO,IAAIH,GACjCE,EAAWE,SAAS,UACrBrC,KAAKwB,SAAL,eAAgBW,EAAWG,MAAM,SAASC,MAAQV,aAAaW,QAAQL,Q,+BAU3E,OACE,yBAAKlB,UAAU,OACb,wDACA,8BACE,kBAAC,EAAUjB,KAAK+B,OAChB,6BACE,+CACA,2BAAOL,KAAK,UAAUe,SAAUzC,KAAKsB,WAAYM,MAAO5B,KAAK+B,MAAMtB,QAASiC,KAAK,SAASC,QAAQ,YAEpG,6BACE,0CACA,2BAAOjB,KAAK,kBAAkBe,SAAUzC,KAAKsB,WAAYM,MAAO5B,KAAK+B,MAAMrB,gBAAiBgC,KAAK,SAASC,QAAQ,YAEpH,6BACE,+CACA,2BAAOjB,KAAK,oBAAoBe,SAAUzC,KAAKsB,WAAYM,MAAO5B,KAAK+B,MAAMpB,kBAAmB+B,KAAK,SAASC,QAAQ,YAExH,6BACE,0CACA,2BAAOjB,KAAK,WAAWe,SAAUzC,KAAKsB,WAAYM,MAAO5B,KAAK+B,MAAMnB,SAAU8B,KAAK,SAASC,QAAQ,aAGxG,sC,GA/CUxB,IAAMC,WCQJwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.59f0858a.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass Goals extends React.Component {\n    timeUntilDone() {\n    const oneDay = 1000 * 60 * 60 * 24;\n    const milliseconds = (this.missingChickens() / this.chickensHatchingPerMinte()) * (1000 * 60);\n    const daysUntilFinished = Math.floor(milliseconds / (1000 * 60 * 60 * 24));\n    const hoursUntilFinished = Math.floor(milliseconds % oneDay / (1000 * 60 * 60));\n    const minutesUntilFinished = Math.floor(milliseconds % (1000 * 60 * 60) / (1000 * 60));\n\n    return {\n      daysUntilFinished,\n      hoursUntilFinished, \n      minutesUntilFinished\n    }\n  }\n\n  missingChickens(props) {\n    return (this.props.endGoal - this.props.currentChickens);\n  } \n\n  chickensHatchingPerMinte() {\n    return (this.props.chickensPerMinute * this.props.habitats);\n  }\n\n  render() {\n      console.log(this.props);\n    const {daysUntilFinished, hoursUntilFinished, minutesUntilFinished} = this.timeUntilDone();\n    const missingChicken = this.missingChickens()\n    return (\n          <div className=\"goals\">\n            <h3>Chickens remaining</h3>\n            <h1>{missingChicken.toLocaleString()}</h1>\n            <h3>Goal reached in</h3>\n            <h2>\n              <span>{daysUntilFinished}</span> days, <span>{hoursUntilFinished}</span> hours and <span>{minutesUntilFinished}</span> minutes</h2>\n          </div>\n    );\n  }\n}\nexport default Goals;\n","import React from 'react';\nimport './App.css';\nimport Goals from './Goals';\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      endGoal: 0, \n      currentChickens: 0,\n      chickensPerMinute: 0,\n      habitats: 4\n    }\n  }\n\n  componentDidMount(nextProps) {\n    for(var i =0; i < localStorage.length; i++){\n      const currentKey = localStorage.key(i);\n      if(currentKey.includes('eggs.')) {\n        this.setState({[currentKey.split('eggs.').pop()]: localStorage.getItem(currentKey)});\n      }\n    }\n  }\n  inputField = (e) => {\n    this.setState({[e.target.name]: Math.round(e.target.value)});\n    localStorage.setItem(`eggs.${e.target.name}`, e.target.value);\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header>Eggs Inc. calculator</header>\n        <main>\n          <Goals {...this.state}></Goals>\n          <div>\n            <span>Chicken goal:</span>\n            <input name=\"endGoal\" onChange={this.inputField} value={this.state.endGoal} type=\"number\" pattern=\"[0-9]*\" />\n          </div>\n          <div>\n            <span>Current:</span>\n            <input name=\"currentChickens\" onChange={this.inputField} value={this.state.currentChickens} type=\"number\" pattern=\"[0-9]*\" />\n          </div>\n          <div>\n            <span>Hatch pr. min</span>\n            <input name=\"chickensPerMinute\" onChange={this.inputField} value={this.state.chickensPerMinute} type=\"number\" pattern=\"[0-9]*\" />\n          </div>\n          <div>\n            <span>Habitats</span>\n            <input name=\"habitats\" onChange={this.inputField} value={this.state.habitats} type=\"number\" pattern=\"[0-9]*\" />\n          </div>\n        </main>\n        <footer></footer>\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}