{"version":3,"sources":["Eggs/Goals.js","Eggs/index.js","App.js","serviceWorker.js","index.js"],"names":["Goals","milliseconds","this","missingChickens","chickensHatchingPerMinte","daysUntilFinished","Math","floor","hoursUntilFinished","minutesUntilFinished","props","endGoal","currentChickens","chickensPerMinute","habitats","timeUntilDone","missingChicken","className","toLocaleString","React","Component","Eggs","inputField","e","setState","target","name","round","value","localStorage","setItem","state","nextProps","i","length","currentKey","key","includes","split","pop","getItem","onChange","type","pattern","App","basename","Navbar","expand","variant","Brand","href","Toggle","aria-controls","Collapse","id","Nav","Link","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.83594a0b.chunk.js","sourcesContent":["import React from 'react';\r\nimport './index.css';\r\n\r\nclass Goals extends React.Component {\r\n    timeUntilDone() {\r\n    const oneDay = 1000 * 60 * 60 * 24;\r\n    const milliseconds = (this.missingChickens() / this.chickensHatchingPerMinte()) * (1000 * 60);\r\n    const daysUntilFinished = Math.floor(milliseconds / (1000 * 60 * 60 * 24));\r\n    const hoursUntilFinished = Math.floor(milliseconds % oneDay / (1000 * 60 * 60));\r\n    const minutesUntilFinished = Math.floor(milliseconds % (1000 * 60 * 60) / (1000 * 60));\r\n\r\n    return {\r\n      daysUntilFinished,\r\n      hoursUntilFinished, \r\n      minutesUntilFinished\r\n    }\r\n  }\r\n\r\n  missingChickens(props) {\r\n    return (this.props.endGoal - this.props.currentChickens);\r\n  } \r\n\r\n  chickensHatchingPerMinte() {\r\n    return (this.props.chickensPerMinute * this.props.habitats);\r\n  }\r\n\r\n  render() {\r\n    const {daysUntilFinished, hoursUntilFinished, minutesUntilFinished} = this.timeUntilDone();\r\n    const missingChicken = this.missingChickens()\r\n    return (\r\n          <div className=\"goals\">\r\n            <h3>Chickens remaining</h3>\r\n            <h1>{missingChicken.toLocaleString()}</h1>\r\n            <h3>Goal reached in</h3>\r\n            <h2>\r\n              <span>{daysUntilFinished}</span> days, <span>{hoursUntilFinished}</span> hours and <span>{minutesUntilFinished}</span> minutes</h2>\r\n          </div>\r\n    );\r\n  }\r\n}\r\nexport default Goals;\r\n","import React from 'react';\r\nimport './index.css';\r\nimport Goals from './Goals';\r\n\r\nclass Eggs extends React.Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      endGoal: 0, \r\n      currentChickens: 0,\r\n      chickensPerMinute: 0,\r\n      habitats: 4\r\n    }\r\n  }\r\n\r\n  componentDidMount(nextProps) {\r\n    for(var i =0; i < localStorage.length; i++){\r\n      const currentKey = localStorage.key(i);\r\n      if(currentKey.includes('eggs.')) {\r\n        this.setState({[currentKey.split('eggs.').pop()]: localStorage.getItem(currentKey)});\r\n      }\r\n    }\r\n  }\r\n  inputField = (e) => {\r\n    this.setState({[e.target.name]: Math.round(e.target.value)});\r\n    localStorage.setItem(`eggs.${e.target.name}`, e.target.value);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n      <header className=\"eggs\">Eggs Inc. calculator</header>\r\n        <main>\r\n          <Goals {...this.state}></Goals>\r\n          <div className=\"list\">\r\n            <span>Chicken goal:</span>\r\n            <input name=\"endGoal\" onChange={this.inputField} value={this.state.endGoal} type=\"number\" pattern=\"[0-9]*\" />\r\n          </div>\r\n          <div className=\"list\">\r\n            <span>Current:</span>\r\n            <input name=\"currentChickens\" onChange={this.inputField} value={this.state.currentChickens} type=\"number\" pattern=\"[0-9]*\" />\r\n          </div>\r\n          <div className=\"list\">\r\n            <span>Hatch pr. min</span>\r\n            <input name=\"chickensPerMinute\" onChange={this.inputField} value={this.state.chickensPerMinute} type=\"number\" pattern=\"[0-9]*\" />\r\n          </div>\r\n          <div className=\"list\">\r\n            <span>Habitats</span>\r\n            <input name=\"habitats\" onChange={this.inputField} value={this.state.habitats} type=\"number\" pattern=\"[0-9]*\" />\r\n          </div>\r\n        </main>\r\n        </>\r\n    );\r\n  }\r\n}\r\nexport default Eggs;\r\n","import React from \"react\";\r\nimport {\r\n  BrowserRouter as Router,\r\n} from \"react-router-dom\";\r\n\r\nimport Navbar from 'react-bootstrap/Navbar'\r\nimport Nav from 'react-bootstrap/Nav'\r\nimport Eggs from \"./Eggs\";\r\nimport './App.css';\r\n\r\n\r\nexport default function App() {\r\n  return (\r\n    <Router basename=\"/\">\r\n      <div className=\"App\">\r\n        <Navbar expand=\"lg\" variant=\"dark\">\r\n          <Navbar.Brand href=\"/\">Peters Stuff</Navbar.Brand>\r\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n            <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                <Nav className=\"mr-auto\">\r\n                    <Nav.Link href=\"/\">Home</Nav.Link>\r\n                    <Nav.Link href=\"/eggs\">Eggs</Nav.Link>\r\n                    <Nav.Link href=\"/walks\">Walks</Nav.Link>\r\n                </Nav>\r\n            </Navbar.Collapse>\r\n        </Navbar>\r\n        <Eggs />\r\n        <footer></footer>\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}